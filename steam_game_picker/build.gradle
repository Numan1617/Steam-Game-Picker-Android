def getVersionCode = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', 'HEAD', '--count'
            standardOutput = code
        }
        return code.toString().toInteger()
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim().split(/-/)[0]
    }
    catch (ignored) {
        return null;
    }
}

apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        versionCode getVersionCode()
        versionName getVersionName()+'.'+getVersionCode()
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    sourceSets {
        instrumentTest.setRoot('src/test')
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.loopj.android:android-async-http:1.4.4@jar'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.1'
    compile files('libs/libGoogleAnalyticsServices.jar')
}
